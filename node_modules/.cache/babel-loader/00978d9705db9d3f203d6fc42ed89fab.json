{"ast":null,"code":"var _jsxFileName = \"/Users/juttat/Desktop/getalife/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Random from './components/Random';\nimport FunList from './components/FunList';\nimport SearchContainer from './components/SearchContainer';\nimport SearchField from './components/SearchField';\nimport Time from './components/Time';\nimport CategoriesSearch from './components/CategoriesSearch';\nimport { funs } from './funExample'; // import SearchContainer from './components/SearchContainer';\n\n/* function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Get a Life</h1>\n        <Random /> \n      </header>\n      <SearchContainer />\n    </div>\n  );\n} */\n\nclass App extends Component {\n  constructor() {\n    super(); // this.state on se joka muuttuu ohjelmassa dynaamisesti, \n    // tässä robotti-array (joka aluksi tyhjä) ja hakukenttä\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchvalue: event.target.value\n      });\n    };\n\n    this.onRandomChange = event => {\n      function makeRandomId(idArray) {\n        return idArray[Math.floor(Math.random() * idArray.length)];\n      } // let idList = [254, 45, 212, 365, 2543];\n\n\n      let idList = [];\n      console.log(funs[0].id);\n      console.log(funs);\n\n      function makeIdArray() {\n        for (let i = 0; i < funs.length; i++) {\n          idList.push(funs[i].id);\n        }\n\n        return idList;\n      }\n\n      makeIdArray();\n      console.log(idList);\n      let randomId = makeRandomId(idList);\n      console.log(randomId);\n      this.setState({\n        random: randomId,\n        showRandom: true,\n        isHidden: true\n      });\n    };\n\n    this.state = {\n      funs: [],\n      searchvalue: '',\n      isHidden: true,\n      random: 0,\n      showRandom: false\n    };\n  }\n\n  componentDidMount() {\n    // fetch tekee http-requestin\n\n    /* fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n        return response.json();\n    })\n    .then(users => {\n        \n    }); */\n    this.setState({\n      funs: funs\n    });\n  }\n\n  toggleHidden() {\n    this.setState({\n      isHidden: !this.state.isHidden,\n      showRandom: false\n    });\n\n    if (this.state.isHidden) {\n      this.setState({\n        searchvalue: ''\n      });\n    }\n  } // nimi on keksitty, ei varattu\n\n\n  render() {\n    // muuttuja randomFun joka ei filtteröi vaan näyttää idn joka random\n    // const randomFun = this.state.funs.id hmm... \n    const filteredFuns = this.state.funs.filter(fun => {\n      // muuttujat näille: \n      // fun.name.toLowerCase()\n      // fun.description.toLowerCase()\n      // fun.category.toLowerCase()\n      // fun.duration.toLowerCase()\n      // yhdistä sitten stringit yhdeksi josta haet\n      const funName = fun.name.toLowerCase();\n      const funDescription = fun.description.toLowerCase();\n      const funValues = funName.concat(funDescription); // const funId = fun.id;\n      // if (this.random === funId) {\n      // return funId.includes(this.state.randomId);\n      // }\n\n      return funValues.includes(this.state.searchvalue.toLowerCase());\n    });\n    const randomFuns = this.state.funs.filter(fun => {\n      // palauttaa funin jonka id on sama kuin nykyisen staten random\n      return fun.id == this.state.random;\n    });\n    let displayFuns = filteredFuns;\n\n    if (this.state.showRandom) {\n      displayFuns = randomFuns;\n    } else {\n      displayFuns = filteredFuns;\n    } // const randomFuns = funs.find(function(element) {\n    //   return element.id === 3;\n    // }); \n    // if else sitä varten että kestää kauan ladata, ei muuta syytä! Voi siis jättää pois\n\n\n    if (this.state.funs.length === 0) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(Random, {\n        randomChange: this.onRandomChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"searchLink\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        onClick: this.toggleHidden.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Choose your own life >\")), !this.state.isHidden && React.createElement(SearchContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(SearchField, {\n        searchChange: this.onSearchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }))), console.log('state random ' + this.state.random), React.createElement(FunList, {\n        funs: displayFuns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/juttat/Desktop/getalife/src/App.js"],"names":["React","Component","Header","Random","FunList","SearchContainer","SearchField","Time","CategoriesSearch","funs","App","constructor","onSearchChange","event","setState","searchvalue","target","value","onRandomChange","makeRandomId","idArray","Math","floor","random","length","idList","console","log","id","makeIdArray","i","push","randomId","showRandom","isHidden","state","componentDidMount","toggleHidden","render","filteredFuns","filter","fun","funName","name","toLowerCase","funDescription","description","funValues","concat","includes","randomFuns","displayFuns","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Random from './components/Random';\nimport FunList from './components/FunList';\nimport SearchContainer from './components/SearchContainer';\nimport SearchField from './components/SearchField';\nimport Time from './components/Time';\nimport CategoriesSearch from './components/CategoriesSearch';\nimport { funs } from './funExample';\n// import SearchContainer from './components/SearchContainer';\n\n/* function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Get a Life</h1>\n        <Random /> \n      </header>\n      <SearchContainer />\n    </div>\n  );\n} */\n\n\nclass App extends Component {\n  constructor() {\n      super()\n      // this.state on se joka muuttuu ohjelmassa dynaamisesti, \n      // tässä robotti-array (joka aluksi tyhjä) ja hakukenttä\n      this.state = {\n          funs: [],\n          searchvalue: '',\n          isHidden: true,\n          random: 0,\n          showRandom: false\n      }\n  }\n\n  componentDidMount() {\n      // fetch tekee http-requestin\n      /* fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n          return response.json();\n      })\n      .then(users => {\n          \n      }); */\n      this.setState({ funs: funs })\n  }\n\n  toggleHidden () {\n    this.setState({\n      isHidden: !this.state.isHidden,\n      showRandom: false \n    })\n    if (this.state.isHidden) {\n      this.setState ({\n        searchvalue: ''\n      })\n    }\n  }\n\n  // nimi on keksitty, ei varattu\n  onSearchChange = (event) => {\n      this.setState({ searchvalue: event.target.value })\n  }\n\n  onRandomChange = (event) => {\n    \n          function makeRandomId(idArray) {\n        \n            return idArray[Math.floor(Math.random()*idArray.length)];\n                \n        }\n        \n            // let idList = [254, 45, 212, 365, 2543];\n        let idList = [];\n        console.log(funs[0].id);\n        console.log(funs);\n        \n        function makeIdArray() {\n            for (let i=0; i<funs.length; i++) {\n                idList.push(funs[i].id);\n            }\n            return idList;\n        }\n        \n        makeIdArray();\n        console.log(idList);\n        \n        let randomId = makeRandomId(idList);\n        \n        console.log(randomId);\n\n        this.setState({ random: randomId, showRandom: true, isHidden: true })\n\n  }\n\n  render() {\n      \n    // muuttuja randomFun joka ei filtteröi vaan näyttää idn joka random\n    // const randomFun = this.state.funs.id hmm... \n    \n    const filteredFuns = this.state.funs.filter(fun => {\n        \n          // muuttujat näille: \n          // fun.name.toLowerCase()\n          // fun.description.toLowerCase()\n          // fun.category.toLowerCase()\n          // fun.duration.toLowerCase()\n          \n          // yhdistä sitten stringit yhdeksi josta haet\n\n          const funName = fun.name.toLowerCase();\n          const funDescription = fun.description.toLowerCase();\n          const funValues = funName.concat(funDescription);\n          // const funId = fun.id;\n\n          \n          // if (this.random === funId) {\n           // return funId.includes(this.state.randomId);\n          // }\n          \n            return funValues.includes(this.state.searchvalue.toLowerCase());\n          \n      })\n    \n    const randomFuns = this.state.funs.filter(fun => {\n      // palauttaa funin jonka id on sama kuin nykyisen staten random\n      return fun.id == this.state.random;\n\n    })\n    \n    let displayFuns = filteredFuns;\n\n    if (this.state.showRandom) {\n      displayFuns = randomFuns;\n    } else {\n      displayFuns = filteredFuns;\n    }\n    \n    // const randomFuns = funs.find(function(element) {\n    //   return element.id === 3;\n    // }); \n\n\n      // if else sitä varten että kestää kauan ladata, ei muuta syytä! Voi siis jättää pois\n      if (this.state.funs.length === 0) {\n          return <h1>Loading...</h1>\n      }\n      else {\n          return (\n              <div className='container'>\n                  \n                  <Header />\n\n                  <Random randomChange={this.onRandomChange} /> \n\n                  <div>\n                    <div className='searchLink'>\n                      <a onClick={this.toggleHidden.bind(this)} >\n                        Choose your own life >\n                      </a>\n                      </div>\n                    {!this.state.isHidden && \n                      <SearchContainer>\n                        <SearchField searchChange={this.onSearchChange}/>\n                        {/* <Time />\n                        <CategoriesSearch /> */}\n                      </SearchContainer>\n                    }\n                  </div>\n\n                 { console.log('state random ' + this.state.random) }\n\n    \n                        <FunList funs={displayFuns}/>\n                \n              </div>\n          );\n      }\n      \n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}